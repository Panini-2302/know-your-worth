
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';
import { Download, FileText, DollarSign } from 'lucide-react';

interface PricingBreakdownProps {
  valuation: any;
}

const PricingBreakdown = ({ valuation }: PricingBreakdownProps) => {
  if (!valuation || !valuation.totalPrice) {
    return (
      <Card className="hover-lift">
        <CardContent className="p-8 text-center">
          <div className="text-gray-400 mb-4">
            <FileText size={48} className="mx-auto" />
          </div>
          <h3 className="text-lg font-playfair font-semibold text-graphite-soft mb-2">
            No Pricing Data Yet
          </h3>
          <p className="text-gray-500 font-lato">
            Complete the valuation calculator to see your pricing breakdown
          </p>
        </CardContent>
      </Card>
    );
  }

  const pieData = [
    { name: 'Labor Cost', value: valuation.laborCost || 0, color: '#F9D5D3' },
    { name: 'Materials', value: valuation.materialCost || 0, color: '#D8F3DC' },
    { name: 'Skill Bonus', value: Math.max(0, valuation.skillBonus || 0), color: '#DDEBF9' },
    { name: 'Complexity', value: Math.max(0, valuation.complexityBonus || 0), color: '#3A3A3A' },
    { name: 'Market Factors', value: Math.max(0, valuation.marketBonus || 0), color: '#F9D5D3' },
    { name: 'Revisions', value: valuation.revisionCost || 0, color: '#D8F3DC' }
  ].filter(item => item.value > 0);

  const barData = [
    { category: 'Base Labor', amount: valuation.laborCost || 0 },
    { category: 'Materials', amount: valuation.materialCost || 0 },
    { category: 'Skill Premium', amount: Math.max(0, valuation.skillBonus || 0) },
    { category: 'Complexity', amount: Math.max(0, valuation.complexityBonus || 0) },
    { category: 'Market Demand', amount: Math.max(0, valuation.marketBonus || 0) },
    { category: 'Revisions', amount: valuation.revisionCost || 0 }
  ].filter(item => item.amount > 0);

  const downloadPDF = () => {
    // Simulated PDF download
    const pdfContent = `
ArtValue Pro - Pricing Report
=============================

Total Valuation: $${valuation.totalPrice?.toLocaleString()}

Breakdown:
- Labor Cost: $${valuation.laborCost?.toLocaleString()}
- Materials: $${valuation.materialCost?.toLocaleString()}
- Skill Bonus: $${valuation.skillBonus?.toLocaleString()}
- Complexity Bonus: $${valuation.complexityBonus?.toLocaleString()}
- Market Factors: $${valuation.marketBonus?.toLocaleString()}
- Revision Costs: $${valuation.revisionCost?.toLocaleString()}

Generated by ArtValue Pro
    `;
    
    const blob = new Blob([pdfContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'artwork-pricing-report.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <Card className="overflow-hidden hover-lift">
      <CardHeader className="bg-gradient-to-r from-blush-rose/30 to-periwinkle-blue">
        <CardTitle className="flex items-center justify-between font-playfair">
          <div className="flex items-center gap-2">
            <DollarSign className="text-blush-rose" size={24} />
            Pricing Breakdown
          </div>
          <Button 
            onClick={downloadPDF}
            variant="outline" 
            size="sm"
            className="border-blush-rose text-blush-rose hover:bg-blush-rose hover:text-white"
          >
            <Download size={16} className="mr-2" />
            Download Report
          </Button>
        </CardTitle>
      </CardHeader>
      <CardContent className="p-6">
        <div className="space-y-6">
          {/* Total Price Display */}
          <div className="text-center bg-gradient-to-br from-blush-rose/10 to-blush-rose/20 rounded-xl p-6">
            <p className="text-sm font-lato text-graphite-soft mb-1">Total Estimated Value</p>
            <div className="text-3xl font-playfair font-bold text-blush-rose">
              ${valuation.totalPrice?.toLocaleString()}
            </div>
          </div>

          {/* Charts Container */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Pie Chart */}
            <div className="space-y-4">
              <h4 className="text-lg font-playfair font-semibold text-center text-graphite-soft">Cost Distribution</h4>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={pieData}
                      cx="50%"
                      cy="50%"
                      innerRadius={40}
                      outerRadius={80}
                      paddingAngle={5}
                      dataKey="value"
                    >
                      {pieData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value) => [`$${value}`, '']} />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* Bar Chart */}
            <div className="space-y-4">
              <h4 className="text-lg font-playfair font-semibold text-center text-graphite-soft">Cost Breakdown</h4>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={barData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis 
                      dataKey="category" 
                      angle={-45}
                      textAnchor="end"
                      height={60}
                      fontSize={10}
                    />
                    <YAxis fontSize={12} />
                    <Tooltip formatter={(value) => [`$${value}`, 'Amount']} />
                    <Bar dataKey="amount" fill="#F9D5D3" radius={[4, 4, 0, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>

          {/* Detailed Breakdown */}
          <div className="space-y-3">
            <h4 className="text-lg font-playfair font-semibold text-graphite-soft">Detailed Analysis</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {[
                { label: 'Labor Cost', value: valuation.laborCost, color: 'bg-blush-rose' },
                { label: 'Materials', value: valuation.materialCost, color: 'bg-mint-gray' },
                { label: 'Skill Premium', value: valuation.skillBonus, color: 'bg-periwinkle-blue' },
                { label: 'Complexity Bonus', value: valuation.complexityBonus, color: 'bg-graphite-soft' },
                { label: 'Market Demand', value: valuation.marketBonus, color: 'bg-blush-rose/70' },
                { label: 'Revision Costs', value: valuation.revisionCost, color: 'bg-mint-gray/70' }
              ].map((item, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className={`w-3 h-3 rounded-full ${item.color}`}></div>
                    <span className="font-lato font-medium text-graphite-soft">{item.label}</span>
                  </div>
                  <span className="font-lato font-semibold text-graphite-soft">
                    ${item.value?.toLocaleString() || '0'}
                  </span>
                </div>
              ))}
            </div>
          </div>

          {/* Recommendations */}
          <div className="bg-periwinkle-blue rounded-lg p-4">
            <h5 className="font-playfair font-semibold text-graphite-soft mb-2">ðŸ’¡ Pricing Insights</h5>
            <ul className="text-sm font-lato text-graphite-soft space-y-1">
              <li>â€¢ Your pricing reflects {valuation.skillLevel > 7 ? 'expert-level' : valuation.skillLevel > 5 ? 'professional' : 'developing'} skill</li>
              <li>â€¢ Consider highlighting your {valuation.complexity > 7 ? 'exceptional detail work' : 'artistic technique'}</li>
              <li>â€¢ Market demand suggests {valuation.marketDemand > 7 ? 'premium pricing opportunity' : 'competitive positioning'}</li>
            </ul>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default PricingBreakdown;
